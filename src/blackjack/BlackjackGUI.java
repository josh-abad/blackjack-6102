/**
 * A GUI implementation of blackjack in Swing for ITE-6102 final
 * 
 * @author Joshua Timothy E. Abad
 */

package blackjack;

import java.awt.Color;
import java.awt.Font;
import java.awt.Frame;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;

public class BlackjackGUI extends javax.swing.JFrame {

    private final Deck DECK;
    private final UserPlayer PLAYER;
    private final Dealer DEALER;
    private final int MINIMUM_BET;
    private final JLabel[] PLAYER_HAND;
    private final JLabel[] DEALER_HAND;
    private final JButton[] PLAY_OPTIONS;
    private final JButton[] BET_OPTIONS;

    /**
     * Creates new form BlackjackGUI
     */
    public BlackjackGUI() {
        DECK = new Deck();
        PLAYER = new UserPlayer();
        DEALER = new Dealer();
        MINIMUM_BET = 25;
        initComponents();

        PLAYER_HAND = new JLabel[6];
        PLAYER_HAND[0] = lbPlayerCard1;
        PLAYER_HAND[1] = lbPlayerCard2;
        PLAYER_HAND[2] = lbPlayerCard3;
        PLAYER_HAND[3] = lbPlayerCard4;
        PLAYER_HAND[4] = lbPlayerCard5;
        PLAYER_HAND[5] = lbPlayerCard6;

        DEALER_HAND = new JLabel[6];
        DEALER_HAND[0] = lbDealerCard1;
        DEALER_HAND[1] = lbDealerCard2;
        DEALER_HAND[2] = lbDealerCard3;
        DEALER_HAND[3] = lbDealerCard4;
        DEALER_HAND[4] = lbDealerCard5;
        DEALER_HAND[5] = lbDealerCard6;
        
        PLAY_OPTIONS = new JButton[4];
        PLAY_OPTIONS[0] = btnHit;
        PLAY_OPTIONS[1] = btnStand;
        PLAY_OPTIONS[2] = btnDoubleDown;
        PLAY_OPTIONS[3] = btnSurrender;

        BET_OPTIONS = new JButton[5];
        BET_OPTIONS[0] = btn5Chips;
        BET_OPTIONS[1] = btn10Chips;
        BET_OPTIONS[2] = btn25Chips;
        BET_OPTIONS[3] = btn50Chips;
        BET_OPTIONS[4] = btn100Chips;

        updateCardImages(PLAYER, PLAYER_HAND);
        updateCardImages(DEALER, DEALER_HAND);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        btn5Chips = new javax.swing.JButton();
        btn10Chips = new javax.swing.JButton();
        btn25Chips = new javax.swing.JButton();
        btn50Chips = new javax.swing.JButton();
        btn100Chips = new javax.swing.JButton();
        lbBet = new javax.swing.JLabel();
        btnHit = new javax.swing.JButton();
        btnStand = new javax.swing.JButton();
        btnDoubleDown = new javax.swing.JButton();
        btnSurrender = new javax.swing.JButton();
        btnDeal = new javax.swing.JButton();
        btnNextHand = new javax.swing.JButton();
        btnQuitGame = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lbBetValue = new javax.swing.JLabel();
        lbCurrentBet = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        lbLogo = new javax.swing.JLabel();
        pnlDealerHand = new javax.swing.JPanel();
        lbDealerCard1 = new javax.swing.JLabel();
        lbDealerCard2 = new javax.swing.JLabel();
        lbDealerCard3 = new javax.swing.JLabel();
        lbDealerCard4 = new javax.swing.JLabel();
        lbDealerCard5 = new javax.swing.JLabel();
        lbDealerCard6 = new javax.swing.JLabel();
        lbDealerHand = new javax.swing.JLabel();
        lbChipsValue = new javax.swing.JLabel();
        pnlPlayerHand = new javax.swing.JPanel();
        lbPlayerCard1 = new javax.swing.JLabel();
        lbPlayerCard2 = new javax.swing.JLabel();
        lbPlayerCard3 = new javax.swing.JLabel();
        lbPlayerCard4 = new javax.swing.JLabel();
        lbPlayerCard5 = new javax.swing.JLabel();
        lbPlayerCard6 = new javax.swing.JLabel();
        lbPlayerHand = new javax.swing.JLabel();
        pnlMessage = new javax.swing.JPanel();
        lbMessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Blackjack");
        setExtendedState(Frame.MAXIMIZED_BOTH);
        setIconImage(new ImageIcon(getClass().getResource(
            "/blackjack/logo2.png"
        )).getImage());

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btn5Chips.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn5Chips.setText("5");
        btn5Chips.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn5ChipsActionPerformed(evt);
            }
        });

        btn10Chips.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn10Chips.setText("10");
        btn10Chips.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn10ChipsActionPerformed(evt);
            }
        });

        btn25Chips.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn25Chips.setText("25");
        btn25Chips.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn25ChipsActionPerformed(evt);
            }
        });

        btn50Chips.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn50Chips.setText("50");
        btn50Chips.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn50ChipsActionPerformed(evt);
            }
        });

        btn100Chips.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn100Chips.setText("100");
        btn100Chips.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn100ChipsActionPerformed(evt);
            }
        });

        lbBet.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbBet.setText("Bet");

        btnHit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnHit.setText("Hit");
        btnHit.setEnabled(false);
        btnHit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHitActionPerformed(evt);
            }
        });

        btnStand.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnStand.setText("Stand");
        btnStand.setEnabled(false);
        btnStand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStandActionPerformed(evt);
            }
        });

        btnDoubleDown.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnDoubleDown.setText("Double Down");
        btnDoubleDown.setEnabled(false);
        btnDoubleDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoubleDownActionPerformed(evt);
            }
        });

        btnSurrender.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSurrender.setText("Surrender");
        btnSurrender.setEnabled(false);
        btnSurrender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSurrenderActionPerformed(evt);
            }
        });

        btnDeal.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnDeal.setText("Deal");
        btnDeal.setEnabled(false);
        btnDeal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDealActionPerformed(evt);
            }
        });

        btnNextHand.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnNextHand.setText("Next Hand");
        btnNextHand.setEnabled(false);
        btnNextHand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextHandActionPerformed(evt);
            }
        });

        btnQuitGame.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnQuitGame.setText("Quit Game");
        btnQuitGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitGameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbBet)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnDeal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNextHand)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnQuitGame)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btn5Chips)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn10Chips)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn25Chips)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn50Chips)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn100Chips))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btnHit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnStand)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDoubleDown)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSurrender)))
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btn100Chips)
                    .addComponent(btn50Chips)
                    .addComponent(btn25Chips)
                    .addComponent(btn10Chips)
                    .addComponent(btn5Chips)
                    .addComponent(lbBet))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btnHit)
                    .addComponent(btnStand)
                    .addComponent(btnDoubleDown)
                    .addComponent(btnSurrender))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeal)
                    .addComponent(btnNextHand)
                    .addComponent(btnQuitGame))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText(String.valueOf(this.MINIMUM_BET) );

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Minimum Bet:");

        lbBetValue.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbBetValue.setText(Format.currency(PLAYER.getBet())
        );

        lbCurrentBet.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbCurrentBet.setText("Bet:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbCurrentBet)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbBetValue)
                    .addComponent(jLabel2))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbBetValue)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lbCurrentBet)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(0, 102, 51));

        lbLogo.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lbLogo.setForeground(new java.awt.Color(255, 255, 255));
        lbLogo.setIcon(ImageResizer.getScaledImage(
            new ImageIcon(getClass().getResource(
                "/blackjack/logo1alt.png"
            )), 150)
        );
        lbLogo.setText("BLACKJACK");
        lbLogo.setText("");

        pnlDealerHand.setBackground(new java.awt.Color(0, 102, 51));

        lbDealerCard1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbDealerCard1.setText("Empty");

        lbDealerCard2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbDealerCard2.setText("Empty");

        lbDealerCard3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbDealerCard3.setText("Empty");

        lbDealerCard4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbDealerCard4.setText("Empty");

        lbDealerCard5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbDealerCard5.setText("Empty");

        lbDealerCard6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbDealerCard6.setText("Empty");

        javax.swing.GroupLayout pnlDealerHandLayout = new javax.swing.GroupLayout(pnlDealerHand);
        pnlDealerHand.setLayout(pnlDealerHandLayout);
        pnlDealerHandLayout.setHorizontalGroup(
            pnlDealerHandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDealerHandLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lbDealerCard1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbDealerCard2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbDealerCard3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbDealerCard4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbDealerCard5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbDealerCard6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlDealerHandLayout.setVerticalGroup(
            pnlDealerHandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDealerHandLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pnlDealerHandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbDealerCard1)
                    .addComponent(lbDealerCard2)
                    .addComponent(lbDealerCard3)
                    .addComponent(lbDealerCard4)
                    .addComponent(lbDealerCard5)
                    .addComponent(lbDealerCard6))
                .addGap(20, 20, 20))
        );

        lbDealerHand.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        lbDealerHand.setForeground(new java.awt.Color(255, 255, 255));
        lbDealerHand.setText("Dealer");
        lbDealerHand.setToolTipText("");
        lbDealerHand.setText("");

        lbChipsValue.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lbChipsValue.setForeground(new java.awt.Color(255, 255, 255));
        lbChipsValue.setIcon(ImageResizer.getScaledImage(
            new ImageIcon(
                getClass().getResource(
                    "/blackjack/chipalt.png"
                )
            ), 
            lbChipsValue.getFont().getSize()
        ));
        lbChipsValue.setText(Format.currency(PLAYER.getChips())
        );

        pnlPlayerHand.setBackground(new java.awt.Color(0, 102, 51));

        lbPlayerCard1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbPlayerCard1.setText("Empty");

        lbPlayerCard2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbPlayerCard2.setText("Empty");

        lbPlayerCard3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbPlayerCard3.setText("Empty");

        lbPlayerCard4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbPlayerCard4.setText("Empty");

        lbPlayerCard5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbPlayerCard5.setText("Empty");

        lbPlayerCard6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbPlayerCard6.setText("Empty");

        javax.swing.GroupLayout pnlPlayerHandLayout = new javax.swing.GroupLayout(pnlPlayerHand);
        pnlPlayerHand.setLayout(pnlPlayerHandLayout);
        pnlPlayerHandLayout.setHorizontalGroup(
            pnlPlayerHandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPlayerHandLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lbPlayerCard1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbPlayerCard2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbPlayerCard3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbPlayerCard4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbPlayerCard5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbPlayerCard6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlPlayerHandLayout.setVerticalGroup(
            pnlPlayerHandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPlayerHandLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(pnlPlayerHandLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbPlayerCard1)
                    .addComponent(lbPlayerCard2)
                    .addComponent(lbPlayerCard3)
                    .addComponent(lbPlayerCard4)
                    .addComponent(lbPlayerCard5)
                    .addComponent(lbPlayerCard6))
                .addGap(20, 20, 20))
        );

        lbPlayerHand.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        lbPlayerHand.setForeground(new java.awt.Color(255, 255, 255));
        lbPlayerHand.setText("Player (0)");
        lbPlayerHand.setText("");

        pnlMessage.setBackground(new java.awt.Color(153, 153, 153));
        pnlMessage.setOpaque(false);

        javax.swing.GroupLayout pnlMessageLayout = new javax.swing.GroupLayout(pnlMessage);
        pnlMessage.setLayout(pnlMessageLayout);
        pnlMessageLayout.setHorizontalGroup(
            pnlMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMessageLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(lbMessage)
                .addContainerGap(30, Short.MAX_VALUE))
        );
        pnlMessageLayout.setVerticalGroup(
            pnlMessageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMessageLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbMessage)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlDealerHand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lbLogo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pnlMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbChipsValue))
                    .addComponent(pnlPlayerHand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbDealerHand)
                            .addComponent(lbPlayerHand))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbLogo)
                            .addComponent(lbChipsValue)))
                    .addComponent(pnlMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbDealerHand)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlDealerHand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbPlayerHand)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlPlayerHand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(73, Short.MAX_VALUE))
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn5ChipsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn5ChipsActionPerformed
        bet(5);
    }//GEN-LAST:event_btn5ChipsActionPerformed

    private void btn10ChipsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn10ChipsActionPerformed
        bet(10);
    }//GEN-LAST:event_btn10ChipsActionPerformed

    private void btn25ChipsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn25ChipsActionPerformed
        bet(25);
    }//GEN-LAST:event_btn25ChipsActionPerformed

    private void btn50ChipsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn50ChipsActionPerformed
        bet(50);
    }//GEN-LAST:event_btn50ChipsActionPerformed

    private void btn100ChipsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn100ChipsActionPerformed
        bet(100);
    }//GEN-LAST:event_btn100ChipsActionPerformed

    /**
     * Displays a panel with a message at the top of the screen
     * @param message the message to be displayed
     * @param color the background color of the the message
     */
    private void displayMessage(String message, Color color) {
        if (!pnlMessage.isVisible()) {
            pnlMessage.setVisible(true);
        }
        if (!pnlMessage.isOpaque()) {
            pnlMessage.setOpaque(true);
        }
        pnlMessage.setBackground(color);
        lbMessage.setText(message);
        lbMessage.setFont(new Font("Segoe UI", 0, 16));
        lbMessage.setForeground(color.equals(Color.green) 
            ? Color.black : Color.white);
    }

    private void displayMessage(String message) {
        displayMessage(message, new Color(153, 153, 153));
        if (pnlMessage.isOpaque()) {
            pnlMessage.setOpaque(false);
        }
    }

    /**
     * Removes the message panel from view
     */
    private void clearMessage() {
        lbMessage.setText("");
        if (pnlMessage.isOpaque()) {
            pnlMessage.setOpaque(false);
        }
    }
   
    /**
     * Updates the total of the PLAYER hand
     * @param player the PLAYER whose hand will be updated
     * @param playerLabel label where the updated information is displayed
     */
    private void updateHandValue(Player player, JLabel playerLabel) {
        playerLabel.setText(player + " (" + player.getHandValue() + ")");
    }

    /**
     * Displays the appropriate card images on the screen
     * @param player the PLAYER from which the hand of cards is displayed
     * @param playerHand an array of labels where the images will be shown
     */
    private void updateCardImages(Player player, JLabel[] playerHand) {
        int i = 0;
        for (JLabel card : playerHand) {
            if (card.getText().equals("Empty")) {
                card.setVisible(false);
            } else if (card.getText().equals("Hidden")) {
                card.setIcon(player.getHand().get(i).getBackIcon());
                card.setText("");
                card.setVisible(true);
            } else if (!card.getText().equals("")) {
                card.setIcon(player.getHand().get(i).frontIcon);
                card.setText("");
                card.setVisible(true);
            }
            i++;
        }
    } 

    /**
     * Enables or disables a set of buttons
     * @param options an array of buttons to be set
     * @param state a boolean to enable or disable
     */
    private void setOptions(JButton[] options, boolean state) {
        for (JButton option : options) {
            if (option.isEnabled() != state) {
                option.setEnabled(state);
            }
        }
    }

    private void btnHitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHitActionPerformed
        Card card = DECK.getCard();
        PLAYER.hit(card);

        displayMessage("You drew " + card);
        updateHandValue(PLAYER, lbPlayerHand);
        
        int i = 0;
        for (JLabel playerCard : PLAYER_HAND) {
            if (playerCard.getText().equals("Empty")) {
                playerCard.setText(card.toString());
                if (i == 5) {
                    btnHit.setEnabled(false);
                    btnDoubleDown.setEnabled(false);
                }
                break;
            }
            i++;
        }
        
        if (PLAYER.getHandValue() > 21) {
            btnHit.setEnabled(false);
            btnDoubleDown.setEnabled(false);
            btnSurrender.setEnabled(false);
        }
        updateCardImages(PLAYER, PLAYER_HAND);
        updateCardImages(DEALER, DEALER_HAND);
    }//GEN-LAST:event_btnHitActionPerformed

    private void btnSurrenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSurrenderActionPerformed
        displayMessage("You surrendered and got half of your bet");
        PLAYER.addChips(PLAYER.getBet() / 2);
        PLAYER.setBet(0);
        updatePlayerStats();
        setOptions(PLAY_OPTIONS, false);
        btnNextHand.setEnabled(true);
    }//GEN-LAST:event_btnSurrenderActionPerformed

    private void btnDealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDealActionPerformed
        lbDealerHand.setText("Dealer");

        this.DECK.shuffle();

        pnlPlayerHand.setBorder(
            javax.swing.BorderFactory.createLineBorder(
                new java.awt.Color(255, 255, 255), 5
            )
        );

        pnlDealerHand.setBorder(
            javax.swing.BorderFactory.createLineBorder(
                new java.awt.Color(255, 255, 255), 5
            )
        );

        setOptions(BET_OPTIONS, false);

        setOptions(PLAY_OPTIONS, true);
        if (PLAYER.getBet() * 2 > PLAYER.getChips()) {
            btnDoubleDown.setEnabled(false);
        }
        
        for (int i = 0; i < 2; i++) {
            Card playerCard = DECK.getCard();
            Card dealerCard = DECK.getCard();
            PLAYER.hit(playerCard);
            DEALER.hit(dealerCard);
            if (i == 0) {
                lbPlayerCard1.setText(playerCard.toString());
                lbDealerCard1.setText("Hidden");
            } else {
                lbPlayerCard2.setText(playerCard.toString());
                lbDealerCard2.setText(dealerCard.toString());
            }
        }

        btnDeal.setEnabled(false);

        updateHandValue(PLAYER, lbPlayerHand);

        updateCardImages(PLAYER, PLAYER_HAND);
        updateCardImages(DEALER, DEALER_HAND);
    }//GEN-LAST:event_btnDealActionPerformed

    private void btnQuitGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitGameActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnQuitGameActionPerformed

    private void btnStandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStandActionPerformed
        setOptions(PLAY_OPTIONS, false);
        pnlMessage.setVisible(true);
        lbDealerCard1.setText(DEALER.getHand().get(0).toString());

        if (DEALER.hasSoft17() || DEALER.getHandValue() <= 16) {
            Card card = DECK.getCard();
            DEALER.hit(card);
            for (JLabel cardLabel : DEALER_HAND) {
                if (cardLabel.getText().equals("Empty")) {
                    cardLabel.setText(card.toString());
                    break;
                }
            }
        }
        updateCardImages(PLAYER, PLAYER_HAND);
        updateCardImages(DEALER, DEALER_HAND);

        final int playerFinalHand = PLAYER.getHandValue();
        final int dealerFinalHand = DEALER.getHandValue();

        updateHandValue(DEALER, lbDealerHand);

        Player winner = null;
        if (PLAYER.isBelowLimit() && DEALER.isBelowLimit()) {
            if (PLAYER.hasBlackjack() ^ DEALER.hasBlackjack()) {
                winner = PLAYER.hasBlackjack() ? PLAYER : DEALER;
            } else if (playerFinalHand == dealerFinalHand) {
                displayMessage("Draw");
                PLAYER.addChips(PLAYER.getBet());
                PLAYER.setBet(0);
            } else {
                winner = playerFinalHand > dealerFinalHand ? PLAYER : DEALER;
            }

        // If either the PLAYER or the DEALER went past the limit, but not both
        } else if (playerFinalHand > 21 ^ dealerFinalHand > 21){
            winner = playerFinalHand <= 21 ? PLAYER : DEALER;
        } else {
            displayMessage("You both lost", Color.red);
        }

        if (winner != null) {
            if (winner instanceof Dealer) {
                displayMessage((DEALER.hasBlackjack()) ? 
                    "The Dealer got blackjack" : "The Dealer won this round", 
                    Color.red);
            } else {
                if (PLAYER.hasBlackjack()) {
                    displayMessage("You got blackjack", Color.green);
                    PLAYER.addChips(PLAYER.getBet() + (PLAYER.getBet() * 1.5));
                } else {
                    displayMessage("You won this round", Color.green);
                    PLAYER.addChips(PLAYER.getBet() * 2);
                }
            }
            PLAYER.setBet(0);
        }

        // End the game if the PLAYER is out of chips
        if (PLAYER.getChips() < MINIMUM_BET) {
            displayMessage("You lost the game", Color.red);
        } else {
            btnNextHand.setEnabled(true);
        }
        
        updatePlayerStats();
    }//GEN-LAST:event_btnStandActionPerformed

    private void btnNextHandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextHandActionPerformed
        newGame();
    }//GEN-LAST:event_btnNextHandActionPerformed

    private void newGame() {
        for (JLabel cardLabel : PLAYER_HAND) {
            cardLabel.setText("Empty");
        }

        for (JLabel cardLabel : DEALER_HAND) {
            cardLabel.setText("Empty");
        }

        lbPlayerHand.setText("");
        lbDealerHand.setText("");
        pnlPlayerHand.setBorder(BorderFactory.createEmptyBorder());
        pnlDealerHand.setBorder(BorderFactory.createEmptyBorder());

        clearMessage();
        btnNextHand.setEnabled(false);
        PLAYER.resetHand(this.DECK);
        DEALER.resetHand(this.DECK);

        setOptions(PLAY_OPTIONS, false);
        if (PLAYER.getBet() * 2 > PLAYER.getChips()) {
            btnDoubleDown.setEnabled(false);
        }

        updateBetOptions();
        updatePlayerStats();
        updateCardImages(PLAYER, PLAYER_HAND);
        updateCardImages(DEALER, DEALER_HAND);
    }

    private void btnDoubleDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoubleDownActionPerformed
        PLAYER.doubleBet();
        Card card = DECK.getCard();
        PLAYER.hit(card);

        displayMessage("You drew " + card);
        updateHandValue(PLAYER, lbPlayerHand);
        
        int i = 0;
        for (JLabel playerCard : PLAYER_HAND) {
            if (playerCard.getText().equals("Empty")) {
                playerCard.setText(card.toString());
                if (i == 5) {
                    btnHit.setEnabled(false);
                    btnDoubleDown.setEnabled(false);
                }
                break;
            }
            i++;
        }
        
        updatePlayerStats();
        btnHit.setEnabled(false);
        btnDoubleDown.setEnabled(false);
        btnSurrender.setEnabled(false);
        updateCardImages(PLAYER, PLAYER_HAND);
        updateCardImages(DEALER, DEALER_HAND);
    }//GEN-LAST:event_btnDoubleDownActionPerformed

    private void bet(int amount) {
        if (PLAYER.getBet() == 0) {
            PLAYER.setBet(amount);
        } else {
            PLAYER.addBet(amount);
        }

        if (PLAYER.getBet() >= MINIMUM_BET) {
            btnDeal.setEnabled(true);
        }

        updatePlayerStats();
        updateBetOptions();
    }

    /**
     * Checks if the PLAYER still has sufficient chips to bet a certain amount
     */
    private void updateBetOptions() {
        final int[] BET_VALUES = {5, 10, 25, 50, 100};
        for (int i = 0, len = BET_VALUES.length; i < len; i++) {
            if (PLAYER.getChips() < BET_VALUES[i]) {
                BET_OPTIONS[i].setEnabled(false);
            } else if (!BET_OPTIONS[i].isEnabled()) {
                BET_OPTIONS[i].setEnabled(true);
            }
        }
    }

    private void updatePlayerStats() {
        lbChipsValue.setText(Format.currency(PLAYER.getChips()));
        lbBetValue.setText(Format.currency(PLAYER.getBet()));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BlackjackGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BlackjackGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BlackjackGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BlackjackGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BlackjackGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn100Chips;
    private javax.swing.JButton btn10Chips;
    private javax.swing.JButton btn25Chips;
    private javax.swing.JButton btn50Chips;
    private javax.swing.JButton btn5Chips;
    private javax.swing.JButton btnDeal;
    private javax.swing.JButton btnDoubleDown;
    private javax.swing.JButton btnHit;
    private javax.swing.JButton btnNextHand;
    private javax.swing.JButton btnQuitGame;
    private javax.swing.JButton btnStand;
    private javax.swing.JButton btnSurrender;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lbBet;
    private javax.swing.JLabel lbBetValue;
    private javax.swing.JLabel lbChipsValue;
    private javax.swing.JLabel lbCurrentBet;
    private javax.swing.JLabel lbDealerCard1;
    private javax.swing.JLabel lbDealerCard2;
    private javax.swing.JLabel lbDealerCard3;
    private javax.swing.JLabel lbDealerCard4;
    private javax.swing.JLabel lbDealerCard5;
    private javax.swing.JLabel lbDealerCard6;
    private javax.swing.JLabel lbDealerHand;
    private javax.swing.JLabel lbLogo;
    private javax.swing.JLabel lbMessage;
    private javax.swing.JLabel lbPlayerCard1;
    private javax.swing.JLabel lbPlayerCard2;
    private javax.swing.JLabel lbPlayerCard3;
    private javax.swing.JLabel lbPlayerCard4;
    private javax.swing.JLabel lbPlayerCard5;
    private javax.swing.JLabel lbPlayerCard6;
    private javax.swing.JLabel lbPlayerHand;
    private javax.swing.JPanel pnlDealerHand;
    private javax.swing.JPanel pnlMessage;
    private javax.swing.JPanel pnlPlayerHand;
    // End of variables declaration//GEN-END:variables
}
