/**
 * A GUI implementation of blackjack in Swing for ITE-6102 final
 * 
 * @author Joshua Timothy E. Abad
 */

package blackjack;

import java.awt.Color;
import java.awt.Font;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.LayoutStyle;
import javax.swing.WindowConstants;

public class BlackjackGUI extends javax.swing.JFrame {

    private final Deck DECK;
    private final UserPlayer PLAYER;
    private final Dealer DEALER;
    private final int MINIMUM_BET;
    private final JLabel[] PLAYER_HAND;
    private final JLabel[] DEALER_HAND;
    private final JButton[] PLAY_OPTIONS;
    private final JButton[] BET_OPTIONS;
    private final JButton[] HAND_OPTIONS;

    /**
     * Creates new form BlackjackGUI
     */
    public BlackjackGUI() {
        DECK = new Deck();
        PLAYER = new UserPlayer();
        DEALER = new Dealer();
        MINIMUM_BET = 25;
        initComponents();

        PLAYER_HAND = new JLabel[6];
        PLAYER_HAND[0] = lbPlayerCard1;
        PLAYER_HAND[1] = lbPlayerCard2;
        PLAYER_HAND[2] = lbPlayerCard3;
        PLAYER_HAND[3] = lbPlayerCard4;
        PLAYER_HAND[4] = lbPlayerCard5;
        PLAYER_HAND[5] = lbPlayerCard6;

        DEALER_HAND = new JLabel[6];
        DEALER_HAND[0] = lbDealerCard1;
        DEALER_HAND[1] = lbDealerCard2;
        DEALER_HAND[2] = lbDealerCard3;
        DEALER_HAND[3] = lbDealerCard4;
        DEALER_HAND[4] = lbDealerCard5;
        DEALER_HAND[5] = lbDealerCard6;
        
        PLAY_OPTIONS = new JButton[4];
        PLAY_OPTIONS[0] = btnHit;
        PLAY_OPTIONS[1] = btnStand;
        PLAY_OPTIONS[2] = btnDoubleDown;
        PLAY_OPTIONS[3] = btnSurrender;

        BET_OPTIONS = new JButton[5];
        BET_OPTIONS[0] = btn5Chips;
        BET_OPTIONS[1] = btn10Chips;
        BET_OPTIONS[2] = btn25Chips;
        BET_OPTIONS[3] = btn50Chips;
        BET_OPTIONS[4] = btn100Chips;

        HAND_OPTIONS = new JButton[3];
        HAND_OPTIONS[0] = btnDeal;
        HAND_OPTIONS[1] = btnNextHand;
        HAND_OPTIONS[2] = btnQuitGame;

        updateCardImages(PLAYER, PLAYER_HAND);
        updateCardImages(DEALER, DEALER_HAND);

        getContentPane().setBackground(new Color(13, 13, 13));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlBetOptions = new JPanel();
        btn5Chips = new JButton();
        btn10Chips = new JButton();
        btn25Chips = new JButton();
        btn50Chips = new JButton();
        lbBet = new JLabel();
        btn100Chips = new JButton();
        pnlCurrentBet = new JPanel();
        lbBetValue = new JLabel();
        lbCurrentBet = new JLabel();
        pnlTable = new JPanel();
        lbLogo = new JLabel();
        pnlDealerHand = new JPanel();
        lbDealerCard1 = new JLabel();
        lbDealerCard2 = new JLabel();
        lbDealerCard3 = new JLabel();
        lbDealerCard4 = new JLabel();
        lbDealerCard5 = new JLabel();
        lbDealerCard6 = new JLabel();
        lbDealerHand = new JLabel();
        lbChipsValue = new JLabel();
        pnlPlayerHand = new JPanel();
        lbPlayerCard1 = new JLabel();
        lbPlayerCard2 = new JLabel();
        lbPlayerCard3 = new JLabel();
        lbPlayerCard4 = new JLabel();
        lbPlayerCard5 = new JLabel();
        lbPlayerCard6 = new JLabel();
        lbPlayerHand = new JLabel();
        pnlMessage = new JPanel();
        lbMessage = new JLabel();
        pnlPlayOptions = new JPanel();
        btnHit = new JButton();
        btnStand = new JButton();
        btnSurrender = new JButton();
        btnDoubleDown = new JButton();
        lbPlay = new JLabel();
        pnlHandOptions = new JPanel();
        btnQuitGame = new JButton();
        btnNextHand = new JButton();
        btnDeal = new JButton();
        lbHand = new JLabel();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Blackjack");
        setExtendedState(Frame.MAXIMIZED_BOTH);
        setIconImage(new ImageIcon(getClass().getResource(
            "/blackjack/images/logo2.png"
        )).getImage());

        pnlBetOptions.setBackground(new Color(19, 19, 19));

        btn5Chips.setBackground(new Color(26, 26, 26));
        btn5Chips.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
        btn5Chips.setForeground(new Color(255, 255, 255));
        btn5Chips.setIcon(ImageResizer.getScaledImage(
            new ImageIcon(getClass().getResource(
                "/blackjack/images/chipRed.png"
            )),
            btn5Chips.getFont().getSize()
        ));
        btn5Chips.setText("5");
        btn5Chips.setFocusPainted(false);
        btn5Chips.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btn5ChipsActionPerformed(evt);
            }
        });

        btn10Chips.setBackground(new Color(26, 26, 26));
        btn10Chips.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
        btn10Chips.setForeground(new Color(255, 255, 255));
        btn10Chips.setIcon(ImageResizer.getScaledImage(
            new ImageIcon(getClass().getResource(
                "/blackjack/images/chipWhite.png")),
        btn10Chips.getFont().getSize()));
btn10Chips.setText("10");
btn10Chips.setFocusPainted(false);
btn10Chips.addActionListener(new ActionListener() {
    public void actionPerformed(ActionEvent evt) {
        btn10ChipsActionPerformed(evt);
    }
    });

    btn25Chips.setBackground(new Color(26, 26, 26));
    btn25Chips.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
    btn25Chips.setForeground(new Color(255, 255, 255));
    btn25Chips.setIcon(ImageResizer.getScaledImage(
        new ImageIcon(getClass().getResource(
            "/blackjack/images/chipGreen.png")),
    btn25Chips.getFont().getSize())
    );
    btn25Chips.setText("25");
    btn25Chips.setFocusPainted(false);
    btn25Chips.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            btn25ChipsActionPerformed(evt);
        }
    });

    btn50Chips.setBackground(new Color(26, 26, 26));
    btn50Chips.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
    btn50Chips.setForeground(new Color(255, 255, 255));
    btn50Chips.setIcon(ImageResizer.getScaledImage(
        new ImageIcon(getClass().getResource(
            "/blackjack/images/chipBlue.png")),
    btn50Chips.getFont().getSize()));
    btn50Chips.setText("50");
    btn50Chips.setFocusPainted(false);
    btn50Chips.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            btn50ChipsActionPerformed(evt);
        }
    });

    lbBet.setFont(new Font("Segoe UI", 1, 12)); // NOI18N
    lbBet.setForeground(new Color(255, 255, 255));
    lbBet.setText("Bet");

    btn100Chips.setBackground(new Color(26, 26, 26));
    btn100Chips.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
    btn100Chips.setForeground(new Color(255, 255, 255));
    btn100Chips.setIcon(ImageResizer.getScaledImage(
        new ImageIcon(getClass().getResource(
            "/blackjack/images/chipBlack.png")),
    btn100Chips.getFont().getSize()));
    btn100Chips.setText("100");
    btn100Chips.setFocusPainted(false);
    btn100Chips.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            btn100ChipsActionPerformed(evt);
        }
    });

        GroupLayout pnlBetOptionsLayout = new GroupLayout(pnlBetOptions);
    pnlBetOptions.setLayout(pnlBetOptionsLayout);
    pnlBetOptionsLayout.setHorizontalGroup(pnlBetOptionsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGroup(pnlBetOptionsLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(pnlBetOptionsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(lbBet)
                .addGroup(pnlBetOptionsLayout.createSequentialGroup()
                    .addComponent(btn5Chips, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btn10Chips)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btn25Chips)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btn50Chips)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btn100Chips, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addContainerGap())
    );
    pnlBetOptionsLayout.setVerticalGroup(pnlBetOptionsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGroup(pnlBetOptionsLayout.createSequentialGroup()
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lbBet)
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(pnlBetOptionsLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                .addComponent(btn5Chips)
                .addComponent(btn10Chips)
                .addComponent(btn25Chips)
                .addComponent(btn50Chips)
                .addComponent(btn100Chips))
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pnlCurrentBet.setBackground(new Color(19, 19, 19));

    lbBetValue.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
    lbBetValue.setForeground(new Color(255, 255, 255));
    lbBetValue.setText(Format.currency(PLAYER.getBet())
    );

    lbCurrentBet.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
    lbCurrentBet.setForeground(new Color(255, 255, 255));
    lbCurrentBet.setText("Bet:");

        GroupLayout pnlCurrentBetLayout = new GroupLayout(pnlCurrentBet);
    pnlCurrentBet.setLayout(pnlCurrentBetLayout);
    pnlCurrentBetLayout.setHorizontalGroup(pnlCurrentBetLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGroup(pnlCurrentBetLayout.createSequentialGroup()
            .addGap(20, 20, 20)
            .addComponent(lbCurrentBet)
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(lbBetValue)
            .addContainerGap(20, Short.MAX_VALUE))
    );
    pnlCurrentBetLayout.setVerticalGroup(pnlCurrentBetLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGroup(GroupLayout.Alignment.TRAILING, pnlCurrentBetLayout.createSequentialGroup()
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlCurrentBetLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(lbBetValue)
                .addComponent(lbCurrentBet))
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pnlTable.setBackground(new Color(0, 102, 51));

    lbLogo.setFont(new Font("Segoe UI", 1, 24)); // NOI18N
    lbLogo.setForeground(new Color(255, 255, 255));
    lbLogo.setIcon(ImageResizer.getScaledImage(
        new ImageIcon(getClass().getResource(
            "/blackjack/images/logo1.png"
        )), 150)
    );
    lbLogo.setText("BLACKJACK");
    lbLogo.setText("");

    pnlDealerHand.setBackground(new Color(0, 102, 51));

    lbDealerCard1.setFont(new Font("Segoe UI", 1, 12)); // NOI18N
    lbDealerCard1.setText("Empty");

    lbDealerCard2.setFont(new Font("Segoe UI", 1, 12)); // NOI18N
    lbDealerCard2.setText("Empty");

    lbDealerCard3.setFont(new Font("Segoe UI", 1, 12)); // NOI18N
    lbDealerCard3.setText("Empty");

    lbDealerCard4.setFont(new Font("Segoe UI", 1, 12)); // NOI18N
    lbDealerCard4.setText("Empty");

    lbDealerCard5.setFont(new Font("Segoe UI", 1, 12)); // NOI18N
    lbDealerCard5.setText("Empty");

    lbDealerCard6.setFont(new Font("Segoe UI", 1, 12)); // NOI18N
    lbDealerCard6.setText("Empty");

        GroupLayout pnlDealerHandLayout = new GroupLayout(pnlDealerHand);
    pnlDealerHand.setLayout(pnlDealerHandLayout);
    pnlDealerHandLayout.setHorizontalGroup(pnlDealerHandLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGroup(pnlDealerHandLayout.createSequentialGroup()
            .addGap(20, 20, 20)
            .addComponent(lbDealerCard1)
            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(lbDealerCard2)
            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(lbDealerCard3)
            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(lbDealerCard4)
            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(lbDealerCard5)
            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(lbDealerCard6)
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    pnlDealerHandLayout.setVerticalGroup(pnlDealerHandLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGroup(pnlDealerHandLayout.createSequentialGroup()
            .addGap(20, 20, 20)
            .addGroup(pnlDealerHandLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                .addComponent(lbDealerCard1)
                .addComponent(lbDealerCard2)
                .addComponent(lbDealerCard3)
                .addComponent(lbDealerCard4)
                .addComponent(lbDealerCard5)
                .addComponent(lbDealerCard6))
            .addGap(20, 20, 20))
    );

    lbDealerHand.setFont(new Font("Segoe UI", 0, 16)); // NOI18N
    lbDealerHand.setForeground(new Color(255, 255, 255));
    lbDealerHand.setText("Dealer");
    lbDealerHand.setToolTipText("");
    lbDealerHand.setText("");

    lbChipsValue.setFont(new Font("Segoe UI", 0, 36)); // NOI18N
    lbChipsValue.setForeground(new Color(255, 255, 255));
    lbChipsValue.setIcon(ImageResizer.getScaledImage(
        new ImageIcon(
            getClass().getResource(
                "/blackjack/images/"
                + "chip.png"
            )
        ), 
        lbChipsValue.getFont().getSize()
    ));
    lbChipsValue.setText(Format.currency(PLAYER.getChips())
    );

    pnlPlayerHand.setBackground(new Color(0, 102, 51));

    lbPlayerCard1.setFont(new Font("Segoe UI", 1, 12)); // NOI18N
    lbPlayerCard1.setText("Empty");

    lbPlayerCard2.setFont(new Font("Segoe UI", 1, 12)); // NOI18N
    lbPlayerCard2.setText("Empty");

    lbPlayerCard3.setFont(new Font("Segoe UI", 1, 12)); // NOI18N
    lbPlayerCard3.setText("Empty");

    lbPlayerCard4.setFont(new Font("Segoe UI", 1, 12)); // NOI18N
    lbPlayerCard4.setText("Empty");

    lbPlayerCard5.setFont(new Font("Segoe UI", 1, 12)); // NOI18N
    lbPlayerCard5.setText("Empty");

    lbPlayerCard6.setFont(new Font("Segoe UI", 1, 12)); // NOI18N
    lbPlayerCard6.setText("Empty");

        GroupLayout pnlPlayerHandLayout = new GroupLayout(pnlPlayerHand);
    pnlPlayerHand.setLayout(pnlPlayerHandLayout);
    pnlPlayerHandLayout.setHorizontalGroup(pnlPlayerHandLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGroup(pnlPlayerHandLayout.createSequentialGroup()
            .addGap(20, 20, 20)
            .addComponent(lbPlayerCard1)
            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(lbPlayerCard2)
            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(lbPlayerCard3)
            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(lbPlayerCard4)
            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(lbPlayerCard5)
            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(lbPlayerCard6)
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    pnlPlayerHandLayout.setVerticalGroup(pnlPlayerHandLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGroup(pnlPlayerHandLayout.createSequentialGroup()
            .addGap(20, 20, 20)
            .addGroup(pnlPlayerHandLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                .addComponent(lbPlayerCard1)
                .addComponent(lbPlayerCard2)
                .addComponent(lbPlayerCard3)
                .addComponent(lbPlayerCard4)
                .addComponent(lbPlayerCard5)
                .addComponent(lbPlayerCard6))
            .addGap(20, 20, 20))
    );

    lbPlayerHand.setFont(new Font("Segoe UI", 0, 16)); // NOI18N
    lbPlayerHand.setForeground(new Color(255, 255, 255));
    lbPlayerHand.setText("Player (0)");
    lbPlayerHand.setText("");

    pnlMessage.setBackground(pnlTable.getBackground().darker());

    lbMessage.setFont(new Font("Segoe UI", 0, 16)); // NOI18N
    lbMessage.setForeground(new Color(255, 255, 255));
    lbMessage.setText("Welcome to Blackjack! Place your bet.");

        GroupLayout pnlMessageLayout = new GroupLayout(pnlMessage);
    pnlMessage.setLayout(pnlMessageLayout);
    pnlMessageLayout.setHorizontalGroup(pnlMessageLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGroup(pnlMessageLayout.createSequentialGroup()
            .addContainerGap(16, Short.MAX_VALUE)
            .addComponent(lbMessage)
            .addContainerGap(16, Short.MAX_VALUE))
    );
    pnlMessageLayout.setVerticalGroup(pnlMessageLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGroup(pnlMessageLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(lbMessage)
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

        GroupLayout pnlTableLayout = new GroupLayout(pnlTable);
    pnlTable.setLayout(pnlTableLayout);
    pnlTableLayout.setHorizontalGroup(pnlTableLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGroup(pnlTableLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(pnlTableLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(pnlDealerHand, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlTableLayout.createSequentialGroup()
                    .addComponent(lbLogo)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlMessage, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbChipsValue))
                .addComponent(pnlPlayerHand, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbDealerHand)
                .addComponent(lbPlayerHand))
            .addContainerGap())
    );
    pnlTableLayout.setVerticalGroup(pnlTableLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGroup(pnlTableLayout.createSequentialGroup()
            .addGroup(pnlTableLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(pnlTableLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(lbLogo))
                .addComponent(pnlMessage, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addComponent(lbChipsValue))
            .addGap(18, 18, 18)
            .addComponent(lbDealerHand)
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(pnlDealerHand, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(lbPlayerHand)
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(pnlPlayerHand, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );

    pnlPlayOptions.setBackground(new Color(19, 19, 19));

    btnHit.setBackground(new Color(26, 26, 26));
    btnHit.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
    btnHit.setForeground(new Color(255, 255, 255));
    btnHit.setText("Hit");
    btnHit.setFocusPainted(false);
    btnHit.setEnabled(false);
    btnHit.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            btnHitActionPerformed(evt);
        }
    });

    btnStand.setBackground(new Color(26, 26, 26));
    btnStand.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
    btnStand.setForeground(new Color(255, 255, 255));
    btnStand.setText("Stand");
    btnStand.setFocusPainted(false);
    btnStand.setEnabled(false);
    btnStand.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            btnStandActionPerformed(evt);
        }
    });

    btnSurrender.setBackground(new Color(26, 26, 26));
    btnSurrender.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
    btnSurrender.setForeground(new Color(255, 255, 255));
    btnSurrender.setText("Surrender");
    btnSurrender.setFocusPainted(false);
    btnSurrender.setEnabled(false);
    btnSurrender.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            btnSurrenderActionPerformed(evt);
        }
    });

    btnDoubleDown.setBackground(new Color(26, 26, 26));
    btnDoubleDown.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
    btnDoubleDown.setForeground(new Color(255, 255, 255));
    btnDoubleDown.setText("Double Down");
    btnDoubleDown.setFocusPainted(false);
    btnDoubleDown.setEnabled(false);
    btnDoubleDown.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            btnDoubleDownActionPerformed(evt);
        }
    });

    lbPlay.setFont(new Font("Segoe UI", 1, 12)); // NOI18N
    lbPlay.setForeground(new Color(255, 255, 255));
    lbPlay.setText("Play");

        GroupLayout pnlPlayOptionsLayout = new GroupLayout(pnlPlayOptions);
    pnlPlayOptions.setLayout(pnlPlayOptionsLayout);
    pnlPlayOptionsLayout.setHorizontalGroup(pnlPlayOptionsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGroup(pnlPlayOptionsLayout.createSequentialGroup()
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlPlayOptionsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(pnlPlayOptionsLayout.createSequentialGroup()
                    .addComponent(btnHit)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btnStand)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btnDoubleDown)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btnSurrender))
                .addComponent(lbPlay))
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    pnlPlayOptionsLayout.setVerticalGroup(pnlPlayOptionsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGroup(GroupLayout.Alignment.TRAILING, pnlPlayOptionsLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(lbPlay)
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(pnlPlayOptionsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(btnHit, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnStand, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlPlayOptionsLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDoubleDown)
                    .addComponent(btnSurrender)))
            .addContainerGap())
    );

    pnlHandOptions.setBackground(new Color(19, 19, 19));

    btnQuitGame.setBackground(new Color(26, 26, 26));
    btnQuitGame.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
    btnQuitGame.setForeground(new Color(255, 255, 255));
    btnQuitGame.setText("Quit Game");
    btnQuitGame.setFocusPainted(false);
    btnQuitGame.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            btnQuitGameActionPerformed(evt);
        }
    });

    btnNextHand.setBackground(new Color(26, 26, 26));
    btnNextHand.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
    btnNextHand.setForeground(new Color(255, 255, 255));
    btnNextHand.setText("Next Hand");
    btnNextHand.setFocusPainted(false);
    btnNextHand.setEnabled(false);
    btnNextHand.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            btnNextHandActionPerformed(evt);
        }
    });

    btnDeal.setBackground(new Color(26, 26, 26));
    btnDeal.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
    btnDeal.setForeground(new Color(255, 255, 255));
    btnDeal.setText("Deal");
    btnDeal.setFocusPainted(false);
    btnDeal.setEnabled(false);
    btnDeal.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            btnDealActionPerformed(evt);
        }
    });

    lbHand.setFont(new Font("Segoe UI", 1, 12)); // NOI18N
    lbHand.setForeground(new Color(255, 255, 255));
    lbHand.setText("Hand");

        GroupLayout pnlHandOptionsLayout = new GroupLayout(pnlHandOptions);
    pnlHandOptions.setLayout(pnlHandOptionsLayout);
    pnlHandOptionsLayout.setHorizontalGroup(pnlHandOptionsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGroup(pnlHandOptionsLayout.createSequentialGroup()
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlHandOptionsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(pnlHandOptionsLayout.createSequentialGroup()
                    .addComponent(btnDeal, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btnNextHand)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(btnQuitGame))
                .addComponent(lbHand))
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    pnlHandOptionsLayout.setVerticalGroup(pnlHandOptionsLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGroup(GroupLayout.Alignment.TRAILING, pnlHandOptionsLayout.createSequentialGroup()
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lbHand)
            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(pnlHandOptionsLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                .addComponent(btnDeal)
                .addComponent(btnNextHand)
                .addComponent(btnQuitGame))
            .addContainerGap())
    );

        GroupLayout layout = new GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(pnlCurrentBet, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(pnlBetOptions, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(pnlPlayOptions, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(pnlHandOptions, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addComponent(pnlTable, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
        .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addComponent(pnlTable, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                .addComponent(pnlBetOptions, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlHandOptions, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlPlayOptions, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlCurrentBet, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn5ChipsActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btn5ChipsActionPerformed
        bet(Integer.parseInt(btn5Chips.getText()));
    }//GEN-LAST:event_btn5ChipsActionPerformed

    private void btn10ChipsActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btn10ChipsActionPerformed
        bet(Integer.parseInt(btn10Chips.getText()));
    }//GEN-LAST:event_btn10ChipsActionPerformed

    private void btn25ChipsActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btn25ChipsActionPerformed
        bet(Integer.parseInt(btn25Chips.getText()));
    }//GEN-LAST:event_btn25ChipsActionPerformed

    private void btn50ChipsActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btn50ChipsActionPerformed
        bet(Integer.parseInt(btn50Chips.getText()));
    }//GEN-LAST:event_btn50ChipsActionPerformed

    private void btn100ChipsActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btn100ChipsActionPerformed
        bet(Integer.parseInt(btn100Chips.getText()));
    }//GEN-LAST:event_btn100ChipsActionPerformed

    /**
     * Displays a panel with a message at the top of the screen
     * @param message the message to be displayed
     * @param color the background color of the the message
     */
    private void displayMessage(String message, Color color) {
        if (!pnlMessage.isVisible()) {
            pnlMessage.setVisible(true);
        }
        if (!pnlMessage.isOpaque()) {
            pnlMessage.setOpaque(true);
        }
        if (!color.equals(pnlMessage.getBackground())) {
            pnlMessage.setBackground(color);
        }
        if (!message.equals(lbMessage.getText())) {
            lbMessage.setText(message);
        }
        lbMessage.setForeground(color.equals(Color.green) 
            ? Color.black : Color.white);
    }

    private void displayMessage(String message) {
        displayMessage(message, pnlTable.getBackground().darker());
    }

    /**
     * Removes the message panel from view
     */
    private void clearMessage() {
        lbMessage.setText("");
        if (pnlMessage.isOpaque()) {
            pnlMessage.setOpaque(false);
        }
    }
   
    /**
     * Updates the total of the PLAYER hand
     * @param player the PLAYER whose hand will be updated
     * @param playerLabel label where the updated information is displayed
     */
    private void updateHandValue(Player player, JLabel playerLabel) {
        playerLabel.setText(player + " (" + player.getHandValue() + ")");
    }

    /**
     * Displays the appropriate card images on the screen
     * @param player the PLAYER from which the hand of cards is displayed
     * @param playerHand an array of labels where the images will be shown
     */
    private void updateCardImages(Player player, JLabel[] playerHand) {
        int i = 0;
        for (JLabel card : playerHand) {
            if (card.getText().equals("Empty")) {
                card.setVisible(false);
            } else if (card.getText().equals("Hidden")) {
                card.setIcon(player.getHand().get(i).getBackIcon());
                card.setText("");
                card.setVisible(true);
            } else if (!card.getText().equals("")) {
                card.setIcon(player.getHand().get(i).getFrontIcon());
                card.setText("");
                card.setVisible(true);
            }
            i++;
        }
    } 

    /**
     * Enables or disables a set of buttons
     * @param options an array of buttons to be set
     * @param state a boolean to enable or disable
     */
    private void setOptions(JButton[] options, boolean state) {
        for (JButton option : options) {
            if (option.isEnabled() != state) {
                option.setEnabled(state);
            }
        }
    }

    private void btnHitActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnHitActionPerformed
        Card card = DECK.getCard();
        PLAYER.hit(card);

        displayMessage("You draw " + card + ".");
        updateHandValue(PLAYER, lbPlayerHand);
        
        int i = 0;
        for (JLabel playerCard : PLAYER_HAND) {
            if (playerCard.getText().equals("Empty")) {
                playerCard.setText(card.toString());
                if (i == 5) {
                    btnHit.setEnabled(false);
                    btnDoubleDown.setEnabled(false);
                }
                break;
            }
            i++;
        }
        
        if (PLAYER.getHandValue() > 21) {
            btnHit.setEnabled(false);
            btnDoubleDown.setEnabled(false);
            btnSurrender.setEnabled(false);
        }
        updateCardImages(PLAYER, PLAYER_HAND);
        updateCardImages(DEALER, DEALER_HAND);
    }//GEN-LAST:event_btnHitActionPerformed

    private void btnSurrenderActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnSurrenderActionPerformed
        displayMessage("You surrendered and got back " 
            + Format.currency(PLAYER.getBet() / 2) + " Chips.");
        PLAYER.addChips(PLAYER.getBet() / 2);
        PLAYER.setBet(0);
        updatePlayerStats();
        setOptions(PLAY_OPTIONS, false);
        btnNextHand.setEnabled(true);
    }//GEN-LAST:event_btnSurrenderActionPerformed

    private void btnDealActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnDealActionPerformed
        lbDealerHand.setText(DEALER.toString());

        this.DECK.shuffle();

        pnlPlayerHand.setBorder(
            javax.swing.BorderFactory.createLineBorder(
                pnlTable.getBackground().brighter(), 5
            )
        );

        pnlDealerHand.setBorder(
            javax.swing.BorderFactory.createLineBorder(
                pnlTable.getBackground().brighter(), 5
            )
        );

        setOptions(BET_OPTIONS, false);

        setOptions(PLAY_OPTIONS, true);
        if (PLAYER.getBet() * 2 >= PLAYER.getChips()) {
            btnDoubleDown.setEnabled(false);
        }
        
        for (int i = 0; i < 2; i++) {
            Card playerCard = DECK.getCard();
            Card dealerCard = DECK.getCard();
            PLAYER.hit(playerCard);
            DEALER.hit(dealerCard);
            if (i == 0) {
                lbPlayerCard1.setText(playerCard.toString());
                lbDealerCard1.setText("Hidden");
            } else {
                lbPlayerCard2.setText(playerCard.toString());
                lbDealerCard2.setText(dealerCard.toString());
            }
        }

        displayMessage("Your first two cards are " + PLAYER.getHand().get(0) 
            + " and " + PLAYER.getHand().get(1) + ".");

        btnDeal.setEnabled(false);

        updateHandValue(PLAYER, lbPlayerHand);

        updateCardImages(PLAYER, PLAYER_HAND);
        updateCardImages(DEALER, DEALER_HAND);
    }//GEN-LAST:event_btnDealActionPerformed

    private void btnQuitGameActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnQuitGameActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnQuitGameActionPerformed

    private void btnStandActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnStandActionPerformed
        setOptions(PLAY_OPTIONS, false);
        pnlMessage.setVisible(true);
        lbDealerCard1.setText(DEALER.getHand().get(0).toString());

        if (DEALER.hasSoft17() || DEALER.getHandValue() <= 16) {
            Card card = DECK.getCard();
            DEALER.hit(card);
            for (JLabel cardLabel : DEALER_HAND) {
                if (cardLabel.getText().equals("Empty")) {
                    cardLabel.setText(card.toString());
                    break;
                }
            }
        }
        updateCardImages(PLAYER, PLAYER_HAND);
        updateCardImages(DEALER, DEALER_HAND);

        final int playerFinalHand = PLAYER.getHandValue();
        final int dealerFinalHand = DEALER.getHandValue();

        updateHandValue(DEALER, lbDealerHand);

        Player winner = null;
        if (PLAYER.isBelowLimit() && DEALER.isBelowLimit()) {
            if (PLAYER.hasBlackjack() ^ DEALER.hasBlackjack()) {
                winner = PLAYER.hasBlackjack() ? PLAYER : DEALER;
            } else if (playerFinalHand == dealerFinalHand) {
                displayMessage("You push for a tie.");
                PLAYER.addChips(PLAYER.getBet());
                PLAYER.setBet(0);
            } else {
                winner = playerFinalHand > dealerFinalHand ? PLAYER : DEALER;
            }

        // If either the PLAYER or the DEALER went past the limit, but not both
        } else if (playerFinalHand > 21 ^ dealerFinalHand > 21){
            winner = playerFinalHand <= 21 ? PLAYER : DEALER;
        } else {
            displayMessage("You both went over.", Color.red);
        }

        if (winner != null) {
            if (winner instanceof Dealer) {
                displayMessage((DEALER.hasBlackjack()) ? 
                    "The Dealer got Blackjack and you lose " 
                    + Format.currency(PLAYER.getBet()) + " Chips." 
                    : "You lose " + Format.currency(PLAYER.getBet()) +  " Chips.", 
                    Color.red);
            } else {
                if (PLAYER.hasBlackjack()) {
                    double payout = PLAYER.getBet() + (PLAYER.getBet() * 1.5);
                    displayMessage("You got Blackjack and won " 
                        + Format.currency(PLAYER.getBet() * 1.5) + " Chips!", Color.green);
                    PLAYER.addChips(payout);
                } else {
                    double payout = PLAYER.getBet() * 2;
                    displayMessage("You won " 
                        + Format.currency(PLAYER.getBet()) + " Chips!", Color.green);
                    PLAYER.addChips(payout);
                }
            }
            PLAYER.setBet(0);
        }

        // End the game if the PLAYER is out of chips
        if (PLAYER.getChips() < MINIMUM_BET) {
            displayMessage("You're out of chips.", Color.red);
        } else {
            btnNextHand.setEnabled(true);
        }
        
        updatePlayerStats();
    }//GEN-LAST:event_btnStandActionPerformed

    private void btnNextHandActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnNextHandActionPerformed
        newGame();
    }//GEN-LAST:event_btnNextHandActionPerformed

    private void newGame() {
        for (JLabel cardLabel : PLAYER_HAND) {
            cardLabel.setText("Empty");
        }

        for (JLabel cardLabel : DEALER_HAND) {
            cardLabel.setText("Empty");
        }

        displayMessage("Place a bet.");

        lbPlayerHand.setText("");
        lbDealerHand.setText("");
        pnlPlayerHand.setBorder(BorderFactory.createEmptyBorder());
        pnlDealerHand.setBorder(BorderFactory.createEmptyBorder());

        btnNextHand.setEnabled(false);
        PLAYER.resetHand(this.DECK);
        DEALER.resetHand(this.DECK);

        setOptions(PLAY_OPTIONS, false);
        if (PLAYER.getBet() * 2 >= PLAYER.getChips()) {
            btnDoubleDown.setEnabled(false);
        }

        updateBetOptions();
        updatePlayerStats();
        updateCardImages(PLAYER, PLAYER_HAND);
        updateCardImages(DEALER, DEALER_HAND);
    }

    private void btnDoubleDownActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnDoubleDownActionPerformed
        PLAYER.doubleBet();
        Card card = DECK.getCard();
        PLAYER.hit(card);

        displayMessage("You double your bet to " 
            + Format.currency(PLAYER.getBet()) + " Chips and draw " 
            + card + ".");
        updateHandValue(PLAYER, lbPlayerHand);
        
        int i = 0;
        for (JLabel playerCard : PLAYER_HAND) {
            if (playerCard.getText().equals("Empty")) {
                playerCard.setText(card.toString());
                if (i == 5) {
                    btnHit.setEnabled(false);
                    btnDoubleDown.setEnabled(false);
                }
                break;
            }
            i++;
        }
        
        updatePlayerStats();
        btnHit.setEnabled(false);
        btnDoubleDown.setEnabled(false);
        btnSurrender.setEnabled(false);
        updateCardImages(PLAYER, PLAYER_HAND);
        updateCardImages(DEALER, DEALER_HAND);
    }//GEN-LAST:event_btnDoubleDownActionPerformed

    private void bet(int amount) {
        if (PLAYER.getBet() == 0) {
            PLAYER.setBet(amount);
        } else {
            PLAYER.addBet(amount);
        }

        if (PLAYER.getBet() >= MINIMUM_BET) {
            clearMessage();
            btnDeal.setEnabled(true);
        } else {
            displayMessage("You need to bet a minimum of 25 Chips to play.");
        }

        updatePlayerStats();
        updateBetOptions();
    }

    /**
     * Checks if the PLAYER still has sufficient chips to bet a certain amount
     */
    private void updateBetOptions() {
        final int[] BET_VALUES = {5, 10, 25, 50, 100};
        for (int i = 0, len = BET_VALUES.length; i < len; i++) {
            if (PLAYER.getChips() < BET_VALUES[i]) {
                BET_OPTIONS[i].setEnabled(false);
            } else if (!BET_OPTIONS[i].isEnabled()) {
                BET_OPTIONS[i].setEnabled(true);
            }
        }
    }

    private void updatePlayerStats() {
        lbChipsValue.setText(Format.currency(PLAYER.getChips()));
        lbBetValue.setText(Format.currency(PLAYER.getBet()));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BlackjackGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new BlackjackGUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton btn100Chips;
    private JButton btn10Chips;
    private JButton btn25Chips;
    private JButton btn50Chips;
    private JButton btn5Chips;
    private JButton btnDeal;
    private JButton btnDoubleDown;
    private JButton btnHit;
    private JButton btnNextHand;
    private JButton btnQuitGame;
    private JButton btnStand;
    private JButton btnSurrender;
    private JLabel lbBet;
    private JLabel lbBetValue;
    private JLabel lbChipsValue;
    private JLabel lbCurrentBet;
    private JLabel lbDealerCard1;
    private JLabel lbDealerCard2;
    private JLabel lbDealerCard3;
    private JLabel lbDealerCard4;
    private JLabel lbDealerCard5;
    private JLabel lbDealerCard6;
    private JLabel lbDealerHand;
    private JLabel lbHand;
    private JLabel lbLogo;
    private JLabel lbMessage;
    private JLabel lbPlay;
    private JLabel lbPlayerCard1;
    private JLabel lbPlayerCard2;
    private JLabel lbPlayerCard3;
    private JLabel lbPlayerCard4;
    private JLabel lbPlayerCard5;
    private JLabel lbPlayerCard6;
    private JLabel lbPlayerHand;
    private JPanel pnlBetOptions;
    private JPanel pnlCurrentBet;
    private JPanel pnlDealerHand;
    private JPanel pnlHandOptions;
    private JPanel pnlMessage;
    private JPanel pnlPlayOptions;
    private JPanel pnlPlayerHand;
    private JPanel pnlTable;
    // End of variables declaration//GEN-END:variables
}
